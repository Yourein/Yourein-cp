pub struct DSU{
    node: usize,
    parent_or_size: Vec<i32>
}

impl DSU{
    pub fn new(n:usize) -> Self{
        Self {
            node: n,
            parent_or_size: vec![-1; n]
        }
    }

    pub fn leader(&mut self, x:usize) -> usize{
        if self.parent_or_size[x] < 0 {return x;}
        self.parent_or_size[x] = self.leader(self.parent_or_size[x] as usize) as i32;
        return self.parent_or_size[x] as usize;
    }

    pub fn is_united(&mut self, x:usize, y:usize) -> bool{
        return self.leader(x) == self.leader(y);
    }

    pub fn unite(&mut self, mut x:usize, mut y:usize){
        x = self.leader(x);
        y = self.leader(y);

        if x == y {return;}

        if -self.parent_or_size[x] > -self.parent_or_size[y] {
            let t = x;
            x = y;
            y = t;
        }

        self.parent_or_size[x] += self.parent_or_size[y];
        self.parent_or_size[y] = x as i32;
    }

    pub fn union_size(&mut self, x:usize) -> i32{
        let lead = self.leader(x);
        return -self.parent_or_size[lead];
    }

    pub fn groups(&self) -> Vec<i32>{
        let mut res:Vec<i32> = Vec::new();

        for i in 0..self.node{
            if self.parent_or_size[i] < 0 {
                res.push(i as i32);
            }
        }

        return res;
    }
}
